var t={d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{l:()=>r,j:()=>i});const i={required:()=>"required",string:()=>"string",email:()=>"email",minStrLen:t=>isNaN(t)?(console.error(`Passing NaN value of '${t}' to minStrLen()`),""):`minStrLen:${t}`,maxStrLen:t=>isNaN(t)?(console.error(`Passing NaN value of '${t}' to maxStrLen()`),""):`maxStrLen:${t}`,in:t=>Array.isArray(t)?"in:"+t.join(","):(console.error(`${t} is not an array.`),""),between:t=>Array.isArray(t)&&2==t.length?"between:"+t.join(","):(console.error(`Error creating a 'between' rule with values ${t}`),""),gt:t=>isNaN(t)?(console.error(`Passing NaN value of '${t}' to gt()`),""):`gt:${t}`,gte:t=>isNaN(t)?(console.error(`Passing NaN value of '${t}' to gte()`),""):`gte:${t}`,lt:t=>isNaN(t)?(console.error(`Passing NaN value of '${t}' to lt()`),""):`lt:${t}`,lte:t=>isNaN(t)?(console.error(`Passing NaN value of '${t}' to lte()`),""):`lte:${t}`,date:t=>`date:${t}`},s={required:t=>`${t} field is required`,string:t=>`${t} must be string`,email:t=>`${t} must be an email string`,in:t=>`${t} value is invalid`,between:(t,e)=>`${t} value must be between ${e[0]} and ${e[1]}`,gt:(t,e)=>`${t} value must be greater then ${e[0]}`,gte:(t,e)=>`${t} value must be greater then or equal to ${e[0]}`,lt:(t,e)=>`${t} value must be greater then ${e[0]}`,lte:(t,e)=>`${t} value must be less then or equal to ${e[0]}`,date:t=>`${t} value is not a valid date string`,minStrLen:(t,e)=>`${t} must have at least ${e[0]} characters`,maxStrLen:(t,e)=>`${t} must not have more than ${e[0]} characters`},n={required:t=>null!=t&&""!==t,string:t=>"string"==typeof t,minStrLen:(t,e)=>"string"==typeof t&&t.length>=e[0],maxStrLen:(t,e)=>"string"==typeof t&&t.length<=e[0],email:t=>/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(t).toLowerCase()),in:(t,e)=>e.includes(t),between:(t,e)=>{const i=Number(t);return i>=e[0]&&i<=e[1]},gt:(t,e)=>Number(t)>e[0],gte:(t,e)=>Number(t)>=e[0],lt:(t,e)=>Number(t)<e[0],lte:(t,e)=>Number(t)<=e[0],date:t=>!isNaN(Date.parse(t))};class l{constructor(t){this.field=t,this.options=void 0,this.validationRules=void 0,this.shouldReset=!1,this.isLive=!1,this.setOptions=this.setOptions.bind(this),this.setValidationRules=this.setValidationRules.bind(this),this.getFieldElement=this.getFieldElement.bind(this),this.reset=this.reset.bind(this),this.validate=this.validate.bind(this),this.bindInputListener=this.bindInputListener.bind(this),this.shouldResetOnInput=this.shouldResetOnInput.bind(this),this.live=this.live.bind(this)}setOptions(t){this.options=t,t.live&&this.live(),t.silent||this.shouldResetOnInput()}setValidationRules(t){this.validationRules=t}getValidationRules(){return this.validationRules}getFieldElement(){return this.field}getFieldName(){return this.getFieldElement().getAttribute("name")}reset(){const t=this.field.parentNode.querySelector("[data-is-validation-error]");t&&t.parentNode.removeChild(t),this.field.classList.remove(this.options.invalidClass),this.field.classList.remove(this.options.validClass)}validate(){const t=(t=>{let e=!0,i=t.getValidationRules();if(i){i=i.filter((t=>"string"==typeof t));for(const s of i){let i,l=s;if(s.includes(":")){const t=s.split(":");l=t[0],i=t[1].split(",")}const a=n[l];if(!a)throw new Error(`Validator '${l}' does not exist!`);if(e=a(t.getFieldElement().value,i),!e){t.attachValidationMessageLabel(l,i);break}}}return e})(this);if(!this.options.silent){const e=t?this.options.validClass:this.options.invalidClass;this.getFieldElement().classList.add(e)}return t}attachValidationMessageLabel(t,e){if(!this.options.silent){const i=this.getFieldName(),n=this.options.validationMessages||{};let l=i.split("_").join(" ");l=l.charAt(0).toUpperCase()+l.slice(1);const a=(n[i]?n[i][t]:void 0)||s[t](l,e),r=document.createElement("p");r.setAttribute("data-is-validation-error","1"),r.style.color=this.options.validationMessageColor,r.style.marginTop="0px",r.innerText=a,this.getFieldElement().parentNode.appendChild(r)}}bindInputListener(){this.field.addEventListener("input",(()=>{this.shouldReset&&this.reset(),this.isLive&&this.validate()}))}shouldResetOnInput(){return this.shouldReset=!0,this.bindInputListener(),this}live(){return this.isLive=!0,this.bindInputListener(),this}}const a={validationMessages:{},silent:!1,invalidClass:"invalid",validClass:"valid",validationMessageColor:"red",live:!0};class r{constructor(t){this.form=t,this.validationRules={},this.options={},this.fields=[],this.getHtmlElement=this.getHtmlElement.bind(this),this.getHtmlFields=this.getHtmlFields.bind(this),this.initialize=this.initialize.bind(this),this.validate=this.validate.bind(this)}getHtmlElement(){return this.form}getHtmlFields(){const t=Array.from(this.form.querySelectorAll('[name]:not([type="checkbox"]):not([type="radio"])')),e=e=>{this.form.querySelectorAll(`[type=${e}]:checked`).forEach((e=>{t.push(e)}))};return e("radio"),e("checkbox"),t}initialize(t,e={}){this.validationRules=t,this.options={...a,...e};const i=this.getHtmlFields();for(let t=0;t<i.length;t++){const e=new l(i[t]);e.setValidationRules(this.validationRules[e.getFieldName()]),e.setOptions(this.options),this.fields.push(e)}return this}validate(){const t=[];let e=!0;return this.fields.forEach((i=>{i.reset(),i.validate()?i.getValidationRules()&&t.push(i.getFieldElement()):e=!1})),{validFields:t,isValid:e}}}var o=e.l,d=e.j;export{o as Form,d as rules};