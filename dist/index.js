var e={d:(t,i)=>{for(var s in i)e.o(i,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{j:()=>i,G:()=>l});const i={required:()=>"required",string:()=>"string",email:()=>"email",minStrLen:e=>isNaN(e)?(console.error(`Passing NaN value of '${e}' to minStrLen()`),""):`minStrLen:${e}`,maxStrLen:e=>isNaN(e)?(console.error(`Passing NaN value of '${e}' to maxStrLen()`),""):`maxStrLen:${e}`,in:e=>Array.isArray(e)?"in:"+e.join(","):(console.error(`${e} is not an array.`),""),between:e=>Array.isArray(e)&&2==e.length?"between:"+e.join(","):(console.error(`Error creating a 'between' rule with values ${e}`),""),gt:e=>isNaN(e)?(console.error(`Passing NaN value of '${e}' to gt()`),""):`gt:${e}`,gte:e=>isNaN(e)?(console.error(`Passing NaN value of '${e}' to gte()`),""):`gte:${e}`,lt:e=>isNaN(e)?(console.error(`Passing NaN value of '${e}' to lt()`),""):`lt:${e}`,lte:e=>isNaN(e)?(console.error(`Passing NaN value of '${e}' to lte()`),""):`lte:${e}`,date:e=>`date:${e}`},s={validationMessages:{},silent:!1,invalidClass:"invalid",validClass:"valid",validationMessageColor:"red",live:!0},n={required:e=>`${e} field is required`,string:e=>`${e} must be string`,email:e=>`${e} must be an email string`,in:e=>`${e} value is invalid`,between:(e,t)=>`${e} value must be between ${t[0]} and ${t[1]}`,gt:(e,t)=>`${e} value must be greater then ${t[0]}`,gte:(e,t)=>`${e} value must be greater then or equal to ${t[0]}`,lt:(e,t)=>`${e} value must be greater then ${t[0]}`,lte:(e,t)=>`${e} value must be less then or equal to ${t[0]}`,date:e=>`${e} value is not a valid date string`,minStrLen:(e,t)=>`${e} must have at least ${t[0]} characters`,maxStrLen:(e,t)=>`${e} must not have more than ${t[0]} characters`},a={required:e=>null!=e&&""!==e,string:e=>"string"==typeof e,minStrLen:(e,t)=>"string"==typeof e&&e.length>=t[0],maxStrLen:(e,t)=>"string"==typeof e&&e.length<=t[0],email:e=>/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(e).toLowerCase()),in:(e,t)=>t.includes(e),between:(e,t)=>{const i=Number(e);return i>=t[0]&&i<=t[1]},gt:(e,t)=>Number(e)>t[0],gte:(e,t)=>Number(e)>=t[0],lt:(e,t)=>Number(e)<t[0],lte:(e,t)=>Number(e)<=t[0],date:e=>!isNaN(Date.parse(e))};class r{constructor(e){this.field=e,this.options=void 0,this.validationRules=void 0,this.shouldReset=!1,this.isLive=!1,this.setOptions=this.setOptions.bind(this),this.setValidationRules=this.setValidationRules.bind(this),this.getFieldElement=this.getFieldElement.bind(this),this.reset=this.reset.bind(this),this.validate=this.validate.bind(this),this.bindInputListener=this.bindInputListener.bind(this),this.shouldResetOnInput=this.shouldResetOnInput.bind(this),this.live=this.live.bind(this)}setOptions(e){this.options=e,e.live&&this.live(),e.silent||this.shouldResetOnInput()}setValidationRules(e){this.validationRules=e}getValidationRules(){return this.validationRules}getFieldElement(){return this.field}getFieldName(){return this.getFieldElement().getAttribute("name")}reset(){const e=this.field.parentNode.querySelector("[data-is-validation-error]");e&&e.parentNode.removeChild(e),this.field.classList.remove(this.options.invalidClass),this.field.classList.remove(this.options.validClass)}validate(){const e=(e=>{let t=!0,i=e.getValidationRules();if(i){i=i.filter((e=>"string"==typeof e));for(const s of i){let i,n=s;if(s.includes(":")){const e=s.split(":");n=e[0],i=e[1].split(",")}const r=a[n];if(!r)throw new Error(`Validator '${n}' does not exist!`);if(t=r(e.getFieldElement().value,i),!t){e.attachValidationMessageLabel(n,i);break}}}return t})(this);if(!this.options.silent){const t=e?this.options.validClass:this.options.invalidClass;this.getFieldElement().classList.add(t)}return e}attachValidationMessageLabel(e,t){if(!this.options.silent){const i=this.getFieldName(),s=this.options.validationMessages||{};let a=i.split("_").join(" ");a=a.charAt(0).toUpperCase()+a.slice(1);const r=(s[i]?s[i][e]:void 0)||n[e](a,t),l=document.createElement("p");l.setAttribute("data-is-validation-error","1"),l.style.color=this.options.validationMessageColor,l.style.marginTop="0px",l.innerText=r,this.getFieldElement().parentNode.appendChild(l)}}bindInputListener(){this.field.addEventListener("input",(()=>{this.shouldReset&&this.reset(),this.isLive&&this.validate()}))}shouldResetOnInput(){return this.shouldReset=!0,this.bindInputListener(),this}live(){return this.isLive=!0,this.bindInputListener(),this}}const l=(e,t,i={})=>{i={...s,...i};const n=[],a=(e=>{const t=Array.from(e.querySelectorAll('[name]:not([type="checkbox"]):not([type="radio"])')),i=i=>{e.querySelectorAll(`[type=${i}]:checked`).forEach((e=>{t.push(e)}))};return i("radio"),i("checkbox"),t})(e);let l=!0;for(let e=0;e<a.length;e++){const s=new r(a[e]);s.setValidationRules(t[s.getFieldName()]),s.setOptions(i),s.reset(),s.validate()?s.getValidationRules()&&n.push(a[e]):l=!1}return{validFormFields:n,formIsValid:l}};var o=t.j,d=t.G;export{o as rules,d as validateForm};